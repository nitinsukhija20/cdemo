---
- name: install python jenkins
  pip:
    name: "{{ item }}"
    state: present
  with_items:
   - python-jenkins
   - lxml

- name: Build curl image
  docker_image:
    name: curl_image
    path: "{{ role_path }}/files/curlContainer/"
    state: present
    force: yes

- name: Build jenkins image
  docker_image:
    name: "{{ jenkins_image_name }}"
    path: "{{ role_path }}/files/jenkins/"
    state: present
    force: yes

- name: Start Jenkins
  docker_container:
    name: "{{ jenkins_container_name }}"
    image: "{{ jenkins_image_name }}"
    state: started
    user: root
    published_ports:
     - "{{ jenkins_port }}:8080"
     - "50000:50000"
    networks:
     - name: conjur
    volumes:
     - "/var/run/docker.sock:/var/run/docker.sock"
     - "conjur_cert:/conjur_cert"
     - "hostfactoryTokens:/hostfactoryTokens"
     - "identity:/identity"
     - "/etc/tower/tower_cli.cfg:/etc/tower/tower_cli.cfg"
    restart_policy: always
    recreate: yes

- name: create identity file for jenkins
  shell: |
    docker exec conjur-cli bash -c "cd /scripts/ && bash 1_hfTokenREST.sh automate && bash 2_obtainIdentityREST.sh automate"
    docker exec {{ jenkins_container_name }} cp /identity/.netrc /root/.netrc
    docker exec {{ jenkins_container_name }} cp /identity/.conjurrc /root/.conjurrc
    docker exec {{ jenkins_container_name }} cp /identity/conjur-{{ conjur_account }}.pem /root/conjur-{{ conjur_account }}.pem

- name: Wait for jenkins to start
  uri:
    url: "{{ jenkins_url }}"
    return_content: yes
  register: webpage
  until: '"New Item" in webpage.content'
  retries: 60
  delay: 3

- name: get api user password
  shell: |
    docker exec {{ conjur_cli_container_name }} conjur variable value secrets/backend/gogs_secure_user_password
  register: password

- name: get api username
  shell: |
    docker exec {{ conjur_cli_container_name }} conjur variable value secrets/backend/gogs_secure_user
  register: username

- name: Create gogs creds in Jenkins
  shell: |
    curl -s -X POST '{{ jenkins_url }}/credentials/store/system/domain/_/createCredentials' --data-urlencode 'json={"": "0","credentials": {"scope": "GLOBAL","id": "gogscred","username": "{{ username.stdout }}", "password": "{{ password.stdout }}", "description": "", "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"}}'

- name: Set up Jenkins Labs
  jenkins_job:
    name: "{{ item.name }}"
    config: "{{ item.config }}"
    url: "{{ jenkins_url }}"
    state: present
  with_items:
   - { name: 'LAB1_Summon', config: "{{ lookup('file','files/LAB1_Summon/config.xml') }}"}
   - { name: 'LAB2_Containers', config: "{{ lookup('file', 'files/LAB2_Containers/config.xml') }}"}
   - { name: 'LAB2_Rotation', config: "{{lookup('file', 'files/LAB2_Rotation/config.xml') }}"}
   - { name: 'LAB2_StopContainers', config: "{{lookup('file', 'files/LAB2_StopContainers/config.xml') }}"}
   - { name: 'LAB3_AnsibleBuildContainers', config: "{{lookup('file', 'files/LAB3_AnsibleBuildContainers/config.xml') }}"}
   - { name: 'LAB3_AnsibleStopContainers', config: "{{lookup('file', 'files/LAB3_AnsibleStopContainers/config.xml') }}"}
   - { name: 'Conjur_Policy', config: "{{lookup('file', 'files/Conjur_Policy/config.xml') }}"}
