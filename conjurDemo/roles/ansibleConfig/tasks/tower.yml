---
- name: Download and extract ansible
  unarchive:
    src: "{{ ansible_download_url }}"
    remote_src: yes
    dest: "/opt"

- name: Configure Ansible Tower
  shell: |
    sed -i "s,admin_password='',admin_password={{ ansible_password }},g" ./inventory
    sed -i "s,pg_password='',pg_password={{ ansible_password }},g" ./inventory
    sed -i "s,rabbitmq_password='',rabbitmq_password={{ ansible_password }},g" ./inventory
    sh setup.sh -e nginx_https_port={{ ansible_port }}
  args:
    chdir: "/opt/{{ ansible_download_directory }}"

- name: Create Tower CLI config file
  copy:
    dest: "/etc/tower/tower_cli.cfg"
    content: |
      host: {{ ansible_external_url }}
      username: {{ ansible_user }}
      password: {{ ansible_password }}

- name: Wait for Ansible tower web interface
  pause:
    seconds: 15
  
- name: Set license
  uri:
    url: "{{ ansible_external_url }}/api/v2/config/"
    method: POST
    validate_certs: NO
    body_format: json
    user: "admin"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    body: "{{ lookup('file','license.json') }}"

- name: Create user in Ansible
  uri:
    url: "{{ ansible_external_url }}/api/v2/users/"
    body_format: json
    user: "admin"
    password: "{{ ansible_password }}"
    method: POST
    return_content: yes
    force_basic_auth: yes
    validate_certs: NO
    status_code: 201
    body: {
    "username": "{{ ansible_user }}",
    "first_name": "{{ ansible_user }}",
    "last_name": "litwak",
    "email": "{{ ansible_user }}@cyberark.com",
    "is_superuser": true,
    "is_system_auditor": true,
    "password": "{{ ansible_password }}"
}
  register: eva_id

- name: Create Organization in Ansible
  uri:
    url: "{{ ansible_external_url }}/api/v2/organizations/1/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    return_content: yes
    force_basic_auth: yes
    validate_certs: NO
    method: PUT
    body: ' {
    "name": "{{ ansible_organization }}",
    "description": "Main Organization",
    "custom_virtualenv": null
}'
  register: org

- name: get gogs api user password
  shell: |
    docker exec {{ conjur_cli_container_name }} conjur variable value secrets/backend/gogs_secure_user_password
  register: gogs_password

- name: get gogs api username
  shell: |
    docker exec {{ conjur_cli_container_name }} conjur variable value secrets/backend/gogs_secure_user
  register: gogs_username

- name: Create credentials for gogs in Ansible
  uri:
    url: "{{ ansible_external_url }}/api/v2/credentials/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    status_code: 201
    return_content: yes
    validate_certs: NO
    method: POST
    body: ' {
    "name": "gogscred",
    "description": "gogs",
    "organization": "{{ org.json.id }}",
    "user": null,
    "team": null,
    "credential_type": 2,
    "inputs": {"username":"{{ gogs_username.stdout }}","password":"{{ gogs_password.stdout }}"}
}'
  register: gogs_cred

- name: Create LAB3_AnsibleConjurIdentity project in Ansible
  uri:
    url: "{{ ansible_external_url }}/api/v2/projects/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    status_code: 201
    return_content: yes
    validate_certs: NO
    method: POST
    body: ' {
    "name": "{{ item.name }}",
    "description": "{{ item.description }}",
    "local_path": "",
    "scm_type": "git",
    "scm_url": "{{ gogs_external_url }}/{{ gogs_organization }}/{{ item.name }}.git",
    "scm_branch": "master",
    "scm_clean": false,
    "scm_delete_on_update": false,
    "credential": "{{ gogs_cred.json.id }}",
    "timeout": 0,
    "organization": "{{ org.json.id }}",
    "scm_update_on_launch": true,
    "scm_update_cache_timeout": 0,
    "custom_virtualenv": null
}'
  with_items:
   - { name: 'LAB3_AnsibleConjurIdentity', description: 'This project will deploy a conjur identity to a remote machine.' }
  register: LAB3_AnsibleConjurIdentity

- name: Create conjurIdentity inventory
  uri:
    url: "{{ ansible_external_url }}/api/v2/inventories/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    status_code: 201
    return_content: yes
    validate_certs: NO
    method: POST
    body: ' {
    "name": "{{ item.name }}",
    "description": "{{ item.description }}",
    "organization": "{{ org.json.id }}",
    "kind": "",
    "host_filter": null,
    "variables": "",
    "insights_credential": null
}'
  with_items:
   - { name: 'conjurIdentity', description: 'This inventory will pull new machines to grant a conjur identity from the source project.' }
  register: conjurIdentity_inventory

- name: Create conjurIdentity inventory source
  uri:
    url: "{{ ansible_external_url }}/api/v2/inventory_sources/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    status_code: 201
    return_content: yes
    validate_certs: NO
    method: POST
    body: ' {
    "name": "{{ item.name }}",
    "description": "{{ item.description }}",
    "source": "scm",
    "source_path": "inventory/hosts",
    "source_script": null,
    "source_vars": "",
    "credential": null,
    "source_regions": "",
    "instance_filters": "",
    "group_by": "",
    "overwrite": false,
    "overwrite_vars": false,
    "timeout": 0,
    "verbosity": 1,
    "inventory": "{{ conjurIdentity_inventory.results[0].json.id }}",
    "update_on_launch": true,
    "update_cache_timeout": 0,
    "source_project": "{{ LAB3_AnsibleConjurIdentity.results[0].json.id }}",
    "update_on_project_update": false
}'
  with_items:
      - { name: 'newMachines', description: 'Machines that will get a conjur identity' }
  register: conjurIdentity_inventorysource


- name: Get conjurIdentity Project status
  uri:
    url: "{{ ansible_external_url }}/api/v2/projects/{{ LAB3_AnsibleConjurIdentity.results[0].json.id }}/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    status_code: 200
    return_content: yes
    validate_certs: NO
    method: GET
  register: status
  until: '"successful" in status.json.status'

- name: Create job template for conjurIdentity
  uri:
    url: "{{ ansible_external_url }}/api/v2/job_templates/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    status_code: 201
    return_content: yes
    validate_certs: NO
    method: POST
    body: ' {
    "name": "{{ item.name }}",
    "description": "{{ item.description }}",
    "job_type": "run",
    "inventory": "{{ conjurIdentity_inventory.results[0].json.id }}",
    "project": "{{ LAB3_AnsibleConjurIdentity.results[0].json.id }}",
    "playbook": "createIdentity.yml",
    "forks": 0,
    "limit": "",
    "verbosity": 0,
    "extra_vars": "",
    "job_tags": "",
    "force_handlers": false,
    "skip_tags": "",
    "start_at_task": "",
    "timeout": 0,
    "use_fact_cache": false,
    "host_config_key": "",
    "ask_diff_mode_on_launch": false,
    "ask_variables_on_launch": false,
    "ask_limit_on_launch": false,
    "ask_tags_on_launch": false,
    "ask_skip_tags_on_launch": false,
    "ask_job_type_on_launch": false,
    "ask_verbosity_on_launch": false,
    "ask_inventory_on_launch": false,
    "ask_credential_on_launch": false,
    "survey_enabled": false,
    "become_enabled": false,
    "diff_mode": false,
    "allow_simultaneous": false,
    "custom_virtualenv": null,
    "job_slice_count": 1,
    "credential": null,
    "vault_credential": null
}'
  with_items:
  - { name: 'conjurIdentityPush', description: 'Pushes a conjur identity to the machine' }
  register: cojurIdentity_template

- name: Create LAB3_AnsibleConjurLookup project in Ansible
  uri:
    url: "{{ ansible_external_url }}/api/v2/projects/"
    body_format: json
    user: "{{ ansible_user }}"
    password: "{{ ansible_password }}"
    force_basic_auth: yes
    status_code: 201
    return_content: yes
    validate_certs: NO
    method: POST
    body: ' {
    "name": "{{ item.name }}",
    "description": "{{ item.description }}",
    "local_path": "",
    "scm_type": "git",
    "scm_url": "{{ gogs_external_url }}/{{ gogs_organization }}/{{ item.name }}.git",
    "scm_branch": "master",
    "scm_clean": false,
    "scm_delete_on_update": false,
    "credential": "{{ gogs_cred.json.id }}",
    "timeout": 0,
    "organization": "{{ org.json.id }}",
    "scm_update_on_launch": true,
    "scm_update_cache_timeout": 0,
    "custom_virtualenv": null
}'
  with_items:
   - { name: 'LAB3_AnsibleConjurLookup', description: 'This project will look up a secret from Conjur.' }
  register: LAB3_AnsibleConjurLookup
